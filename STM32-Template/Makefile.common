# Executables
ELF=$(notdir $(CURDIR)).elf
HEX=$(notdir $(CURDIR)).hex

# Output format. (can be srec, ihex, binary)
FORMAT=binary

BUILDDIR=build

# Tool path
TOOLROOT=/usr/local/gcc-arm-none-eabi-5_4-2016q2/bin

# Library path
LIBROOT=$(TEMPLATEROOT)/stdperiflib_V3_5_0

# Tools
CC=$(TOOLROOT)/arm-none-eabi-gcc
LD=$(TOOLROOT)/arm-none-eabi-gcc
AR=$(TOOLROOT)/arm-none-eabi-ar
AS=$(TOOLROOT)/arm-none-eabi-as
OB=$(TOOLROOT)/arm-none-eabi-objcopy
SZ=$(TOOLROOT)/arm-none-eabi-size

# Code Paths
DEVICE=$(LIBROOT)/Libraries/CMSIS/CM3/DeviceSupport/ST/STM32F10x
CORE=$(LIBROOT)/Libraries/CMSIS/CM3/CoreSupport
PERIPH=$(LIBROOT)/Libraries/STM32F10x_StdPeriph_Driver

# Search path for standard files
vpath %.c $(TEMPLATEROOT)

# Search path for peripheral library
vpath %.c $(CORE)
vpath %.c $(PERIPH)/src
vpath %.c $(DEVICE)

# Search path for Library
vpath %.c $(TEMPLATEROOT)/Library/ff9/src
vpath %.c $(TEMPLATEROOT)/Library/ff9/src/option
vpath %.c $(TEMPLATEROOT)/Library

#  Processor specific
CPU = STM32F10X_MD 
LDSCRIPT = $(TEMPLATEROOT)/STM32F103RBTx_FLASH.ld
STARTUP= startup_stm32f10x.o system_stm32f10x.o 

# Compilation Flags
FULLASSERT = -DUSE_FULL_ASSERT

LDFLAGS+= -T$(LDSCRIPT) -mthumb -mcpu=cortex-m3 -mfloat-abi=soft -specs=nosys.specs -specs=nano.specs  
LDFLAGS+= -Wl,-Map=output.map -Wl,--gc-sections -lm
CFLAGS+= -mcpu=cortex-m3 -mthumb -mfloat-abi=soft -D__weak="__attribute__((weak))"
CFLAGS+= -Wall -fmessage-length=0 -ffunction-sections -c -fmessage-length=0 -std=gnu11
CFLAGS+= -I$(TEMPLATEROOT) -I$(DEVICE) -I$(CORE) -I$(PERIPH)/inc -I.
CFLAGS+= -D$(CPU) -DUSE_STDPERIPH_DRIVER $(FULLASSERT)
CFLAGS+= -I$(TEMPLATEROOT)/Library

# verbose ??
#CFLAGS+= -v

HEXSIZE = $(SZ) --target=$(FORMAT) $(HEX)
MSG1=Hex file size:

#$(OBJS): | $(BUILDDIR)

# Build executable
$(ELF) : $(OBJS)
	$(LD) $(LDFLAGS) -o $@ $(OBJS) $(LDLIBS)
	$(OB) -O binary $(ELF) $(HEX)
	@if test -f $(HEX); then echo; echo $(MSG1); $(HEXSIZE); 2>/dev/null; echo; fi

# compile and generate dependency info
%.o: %.c
	$(CC) -c $(CFLAGS) $< -o $@
	$(CC) -MM $(CFLAGS) $< > $*.d

%.o: %.s
	$(CC) -c $(CFLAGS) $< -o $@

clean:
	rm -f $(OBJS) $(OBJS:.o=.d) $(ELF) $(HEX) startup_stm32f* *.map $(CLEANOTHER)

debug: $(ELF)
#	arm-none-eabi-gdb $(HEX)
	arm-none-eabi-gdb $(ELF)


# pull in dependencies
-include $(OBJS:.o=.d)

